        - module PowerCalculation
        - 
        - using DataFrames.readtable, ArrayViews.view
        - 
        - export calpower
        - 
        - const epsilon0 = 8.854e-12
        - const c = 299792458.0
        - const a = 2.032e-3
        - const b = a/2
        - const dx = 0.01e-3
        - const dz = dx
        - const dA = dx*dz
        - const nx = round(Int, 1.15*2/dx*1e-3) + 1
        - const nz = round(Int, 0.57*2/dz*1e-3) + 1
        - const ndata = 21
        - 
        - function sumpower(data::Matrix{Float64})
        0     output = 0.0
        0     for x in data
        0         output += c*epsilon0*dA*x^2
        -     end
        0     output
        - end
        - 
        - function checker!(data::Matrix{Real}, filtered::Matrix{Float64})
     6688     j = 1
        0     for i in 1:size(data, 1)
        0         if abs(data[i, 1]) <= 1.15 && abs(data[i, 2]) <= 0.57
        0             filtered[j, :] = view(data, i, 4:6)
        0             j += 1
        -         end
        -     end
        - end
        - 
        - function calpower()
    15104     powers = Array{Float64}(ndata)
   637632     filteredtable = Array{Float64}(nx*nz, 3)
        0     table1 = readtable("J:/TWT/power2/1.txt", skipstart=3, header=false, separator=' ')
        0     arrtable = convert(Array, table1)
        0     checker!(arrtable, filteredtable)
        0     powers[1] = sumpower(filteredtable)
        0     for i in 2:ndata
        0         table = readtable("J:/TWT/power2/" * string(i) * ".txt", skipstart=3, header=false, separator=' ')
        0         arrtable = convert(Array, table)
        0         checker!(arrtable, filteredtable)
        0         powers[i] = sumpower(filteredtable)
        -     end
        0     powerAvg = mean(powers)
        - end
        - 
        - end
